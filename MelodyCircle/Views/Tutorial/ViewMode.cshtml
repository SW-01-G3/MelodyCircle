@using MelodyCircle.ExtensionMethods
@using Microsoft.AspNetCore.Identity
@using MelodyCircle.Data
@model IEnumerable<Tutorial>
@inject UserManager<User> UserManager
@inject ApplicationDbContext Context

@{
    ViewData["Title"] = @Html.Translate("LB_SUBSCRIBEDTUTO");
}

<h1 class="text-center">@ViewData["Title"]</h1>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const target = document.getElementById('getPartial');
            const observer = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        let lastId = document.getElementById("content-container").lastElementChild.getAttribute("data-tutorial-id");
                        $.ajax({
                            url: 'ViewModePartials',
                            type: 'GET',
                            data: {
                                lastId: lastId
                            },
                            success: function (response) {
                                $('#content-container').append(response);
                                console.log(response);
                            },
                            error: function () {
                                console.error('Failed to fetch the HTML');
                            }
                        });
                        console.log(lastId);
                    }
                });
            }, {
                root: null, // assuming the viewport is the root
                rootMargin: '0px',
                threshold: 0.1 // Adjust this value based on when you want to trigger the load
            });

            observer.observe(target);
        });
    </script>
}

<div class="container">
   
        @if (Model != null && Model.Any())
        {
        <div id="content-container" class="d-flex justify-content-center">
            @await Html.PartialAsync("_ViewModePartial", Model)
        </div>
        <div id="getPartial"></div>
        }
        else
        {
            <div class="d-flex align-items-center justify-content-center" style="height: 250px;">
	            <h3>@Html.Translate("LB_NOAVAVAILABLETUTO")</h3>
	            </div>
        }   
</div>
<div class="text-end">
	<button type="button" class="btn btn-sm bg-darkPurple text-white rounded-circle floating-button-left" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-html="true"
	        title="<p>@Html.Translate("TT_SUBSCRIBEDTUTO")</p>">
		?
	</button>
</div>
<div class="text-end">
	@if (User.IsInRole("Teacher") || User.IsInRole("Mod") || User.IsInRole("Admin"))
	{
        <a asp-action="EditMode" class="btn bg-purple text-white rounded floating-button-center"><img src="~/img/edit-white.svg" class="icon text-white" /><img src="~/img/cycle-svgrepo-com.svg" /></a>
	}
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const stars = document.querySelectorAll(".star");
        //const baseUrl = '@Url.Content("~/img/")';

        stars.forEach(star => {
            star.addEventListener("mouseover", function () {
                const value = parseInt(this.getAttribute("data-value"));
                fillStars(value, "/img/star-filled-svgrepo-com.svg", "/img/estrelaEmpty.svg");
            });

            star.addEventListener("mouseleave", function () {
                const rating = parseInt(document.getElementById("starRating").value);
                fillStars(rating, "/img/star-filled-svgrepo-com.svg", "/img/estrelaEmpty.svg");
            });

            star.addEventListener("click", function () {
                const value = parseInt(this.getAttribute("data-value"));
                document.getElementById("starRating").value = value;
                fillStars(value, "/img/star-filled-svgrepo-com.svg", "/img/estrelaEmpty.svg");
            });
        });

        function fillStars(value, filledSrc, emptySrc) {
            stars.forEach(star => {
                const starValue = parseInt(star.getAttribute("data-value"));
                if (starValue <= value) {
                    star.src = filledSrc;
                } else {
                    star.src = emptySrc;
                }
            });
        }
    });
</script>