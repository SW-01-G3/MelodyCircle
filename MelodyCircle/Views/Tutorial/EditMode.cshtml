@using MelodyCircle.ExtensionMethods
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model IEnumerable<Tutorial>

@{
    ViewData["Title"] = @Html.Translate("LB_CREATEDTUTO");
}

@section Scripts {
    <script>
        // document.getElementById("getPartial").addEventListener("click", () => {
        //     let lastId = document.getElementById("content-container").lastElementChild.getAttribute("data-tutorial-id");
        //     $.ajax({
        //         url: 'EditModePartials',
        //         type: 'GET',
        //         data: {
        //             lastId: lastId
        //         },
        //         success: function (response) {
        //             $('#content-container').append(response);
        //         },
        //         error: function () {
        //             console.error('Failed to fetch the HTML');
        //         }
        //     });
        // });
        document.addEventListener("DOMContentLoaded", () => {
            const target = document.getElementById('getPartial');
            const observer = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        let lastId = document.getElementById("content-container").lastElementChild.getAttribute("data-tutorial-id");
                        $.ajax({
                            url: 'EditModePartials',
                            type: 'GET',
                            data: {
                                lastId: lastId
                            },
                            success: function (response) {
                                $('#content-container').append(response);
                            },
                            error: function () {
                                console.error('Failed to fetch the HTML');
                            }
                        });
                    }
                });
            }, {
                root: null, // assuming the viewport is the root
                rootMargin: '0px',
                threshold: 0.1 // Adjust this value based on when you want to trigger the load
            });

            observer.observe(target);
        });
    </script>
}

<h2 class="text-center">@ViewData["Title"]</h2>

@if (User.Identity.IsAuthenticated)
{
    @if (User.IsInRole("Teacher") || User.IsInRole("Mod") || User.IsInRole("Admin"))
    {
        <a asp-action="Create" class="btn bg-purple text-white rounded-circle floating-button z-3">+</a>
    }
}



<div class="container">
    
        @if (Model != null && Model.Any())
        {
            <div id="content-container" class="d-flex flex-wrap justify-content-center">
                @await Html.PartialAsync("_EditModePartial", Model)
            </div>
            <div id="getPartial"></div>
        }
        else
        {
	        <div class="d-flex align-items-center justify-content-center" style="height: 250px;">
            <h1>@Html.Translate("LB_NOAVAVAILABLETUTO")</h1>
	        </div>
        }
    
</div>
<div class="text-end">
	<button type="button" class="btn btn-sm bg-darkPurple text-white rounded-circle floating-button-left" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-html="true"
            title="<p>@Html.Translate("TT_CREATEDTUTO")</p>">
		?
	</button>
</div>

<div class="text-end">
	@if (User.IsInRole("Teacher") || User.IsInRole("Mod") || User.IsInRole("Admin"))
	{
		<a asp-action="ViewMode" class="btn bg-purple text-white rounded floating-button-center"><img src="~/img/view-eye-svgrepo-com.svg" /><img src="~/img/cycle-svgrepo-com.svg" /></a>

	}
</div>