@using MelodyCircle.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using MelodyCircle.ExtensionMethods
@model IEnumerable<MelodyCircle.Models.Step>
@inject ApplicationDbContext Context
@inject UserManager<User> UserManager

@{
    ViewData["Title"] = ViewBag.Title;
}

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/quill@2.0.0-rc.2/dist/quill.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Menu Lateral
            var stepList = document.getElementById('stepList');
            new Sortable(stepList, {
                group: 'shared',
                animation: 150,
                draggable: ".step-div",
                handle: '.drag-handle',
                onEnd: updateOrder // Use a mesma função para atualizar a ordem
            });

            // Menu Central (ajuste o seletor conforme necessário)
            var centralMenu = document.getElementById('centralMenu');
            new Sortable(centralMenu, {
                group: 'shared',
                animation: 150,
                draggable: ".step-div",
                handle: '.drag-handle',
                onEnd: updateOrder // Use a mesma função para atualizar a ordem
            });
        });

        function updateOrder(evt) {
            var stepOrder = Array.from(evt.to.children).map(function (step) {
                return step.getAttribute('data-step-id');
            });
            console.log('stepOrder to send:', stepOrder);
            fetch('/Step/UpdateOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(stepOrder)
            })
                .then(function (response) { return response.json(); })
                .then(function (data) {
                    console.log('Success:', data);

                    // Se a operação foi bem-sucedida, então a variável `stepOrder` contém a ordem correta.
                    if (data && data.success) {
                        // Obtenha os elementos atuais no menu central.
                        var centralMenuElements = document.querySelectorAll('#centralMenu .step-div');

                        // Crie um mapa de ID para elemento para acesso rápido.
                        var centralMenuElementsMap = {};
                        centralMenuElements.forEach(function (element) {
                            var id = element.getAttribute('data-step-id');
                            centralMenuElementsMap[id] = element;
                        });

                        // Use `stepOrder` do menu lateral para ordenar os elementos do menu central.
                        var centralMenu = document.getElementById('centralMenu');
                        centralMenu.innerHTML = ''; // Limpe o menu central.

                        stepOrder.forEach(function (id) {
                            var element = centralMenuElementsMap[id];
                            if (element) {
                                centralMenu.appendChild(element); // Re-adicione o elemento na nova ordem.
                            }
                        });
                    }
                })
                .catch(function (error) { console.error(error); });
        }
    </script>

    <link href="https://cdn.jsdelivr.net/npm/quill@2.0.0-rc.2/dist/quill.snow.css" rel="stylesheet" />
}

@* LATERAL MENU *@
<div class="row justify-content-around">
    <aside class="col-md-2 h-100 bg-white rounded-3 border-purple">
        <div id="stepList">
            @if (Model != null && Model.Any())
            {
                var userId = UserManager.GetUserId(User);

                Guid tutoId = ViewBag.TutorialId;

                var subscription = Context.SubscribeTutorials.Where(s => s.User.Id.ToString() == userId).
                FirstOrDefault(st => st.User.Id.ToString() == userId && st.TutorialId == tutoId);

                if (subscription != null)
                {
                    <p>
                        @subscription.CompletedSteps.Count() / @Model.Count()
                        | @subscription.CompletedSteps.CalculateCompletionPercentage(Model.Count(), 2)% completado
                    </p>
                }

                @foreach (var step in Model)
                {
                    <div class="col justify-content-evenly mt-3 step-div" data-step-id="@step.Id">
                        <div class="drag-handle">
                            @if (subscription != null)
                            {
                                <form method="post" asp-action="CompleteStep" asp-route-tutorialId="@step.TutorialId" asp-route-stepId="@step.Id">
                                    <button type="submit">
                                        Check
                                    </button>
                                </form>
                            }

                            <span>@Html.DisplayFor(modelItem => step.Title)</span>
                            @if (User.Identity.IsAuthenticated)
                            {
                                @if (User.Identity.Name == ViewBag.Creator)
                                {
                                    <a asp-action="Edit" asp-route-id="@step.Id"><img src="~/img/edit-black.svg" alt="Edit step." class="icon" /></a>
                                    <a asp-action="Delete" asp-route-id="@step.Id"><img src="~/img/delete.svg" alt="Delete step." class="icon" /></a>
                                }
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="mt-3">Ainda não foi adicionado conteudo.</p>
            }
        </div>
@* END OF LATERAL MENU *@

        @if (User.Identity.IsAuthenticated)
        {
            @if (User.Identity.Name == ViewBag.Creator)
            {
                <div class="d-flex justify-content-center my-3">
                    <a asp-action="Create" class="btn bg-purple text-white rounded-circle addStepbutton" asp-route-tutorialId="@ViewBag.TutorialId">+</a>
                </div>
            }
        }
    </aside>

    @* CENTRAL MENU *@
    <div class="col-md-8" id="centralMenu">
        <div class="row d-flex justify-content-center">
            <h2 class="align-self-center">@ViewData["Title"]</h2>
            <h3 class="align-self-center">@ViewBag.Creator</h3>
        </div>

        @foreach (var step in Model)
        {
            <div class="my-3 step-div" data-step-id="@step.Id">
                <div class="d-flex justify-content-center drag-handle">
                    <h4>@Html.DisplayFor(modelItem => step.Title)</h4>
                </div>

                <section id="stepDiv" name="stepDiv" class="border-purple bg-white rounded-3 py-2 px-1">

                </section>
            </div>
        }
    </div>
    @* END OF CENTRAL MENU *@

    <input type="hidden" id="editor" name="editor" value="" />
</div>

<div class="text-end">
    <button type="button" class="btn btn-sm bg-darkPurple text-white rounded-circle floating-button-left" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-html="true"
            title="<p>Nesta página pode visualizar todos os passos do tutorial. Caso seja instrutor, poderá adicionar passos, editar ou remover.</p>">
        ?
    </button>

    <a asp-action="Index" asp-controller="Tutorial">Voltar à lista de Tutoriais</a>
</div>