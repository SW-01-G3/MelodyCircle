@using MelodyCircle.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using MelodyCircle.ExtensionMethods
@model IEnumerable<MelodyCircle.Models.Step>
@inject ApplicationDbContext Context
@inject UserManager<User> UserManager
@{ var cntStep = 0; } 

@{
    ViewData["Title"] = ViewBag.Title;
}

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/quill@2.0.0-rc.2/dist/quill.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.14.0/Sortable.min.js"></script>
    @* <script src="~/js/site.js"></script> *@

    <script>
        let quill = new Quill('#editor');
        let stepDivs = document.getElementsByName("stepDiv");
        let descriptionDiv = document.getElementById("descriptionDiv");
        let stepData = [];
        let tutorialDescription = @Html.Raw(Context.Tutorials.Where(elem => elem.Title == ViewData["Title"].ToString()).First().Description);
        
        console.log(tutorialDescription);
        
        function convertToHtml(editor, contents) {
            editor.setContents(contents);
            return editor.root.innerHTML;
        }

        @if (Model != null && Model.Any())
        {
            @foreach (var step in Model)
            {
                @:stepData.push(@Html.Raw(step.Content));
            }
        }

        descriptionDiv.innerHTML = convertToHtml(quill, tutorialDescription);

        for (let cnt = 0; cnt < stepData.length; cnt++) {
            stepDivs[cnt].innerHTML = convertToHtml(quill, stepData[cnt]);
        }

        document.addEventListener('DOMContentLoaded', function () {
            @if (User.Identity.IsAuthenticated && User.Identity.Name == ViewBag.Creator)
            {
                @:initSortable();
            }
        });

        function initSortable() {
            var stepList = document.getElementById('stepList');
            new Sortable(stepList, {
                group: 'shared',
                animation: 150,
                draggable: ".step-div",
                handle: '.drag-handle',
                onEnd: updateOrder
            });

            var centralMenu = document.getElementById('centralMenu');
            new Sortable(centralMenu, {
                group: 'shared',
                animation: 150,
                draggable: ".step-div",
                handle: '.drag-handle',
                onEnd: updateOrder
            });
        }

        function updateOrder(evt) {
            var stepOrder = Array.from(evt.to.children).map(function (step) {
                return step.getAttribute('data-step-id');
            });

            console.log('stepOrder to send:', stepOrder);

            fetch('/Step/UpdateOrder', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(stepOrder)
            })
                .then(function (response) { return response.json(); })
                .then(function (data) {
                    console.log('Success:', data);

                    if (data && data.success) {
                        var centralMenuElements = document.querySelectorAll('#centralMenu .step-div');

                        var centralMenuElementsMap = {};

                        centralMenuElements.forEach(function (element) {
                            var id = element.getAttribute('data-step-id');
                            centralMenuElementsMap[id] = element;
                        });

                        var centralMenu = document.getElementById('centralMenu');

                        centralMenu.innerHTML = '';

                        stepOrder.forEach(function (id) {
                            var element = centralMenuElementsMap[id];
                            if (element)
                                centralMenu.appendChild(element);
                        });
                    }
                })
                .catch(function (error) { console.error(error); });
        }


    </script>

    <link href="https://cdn.jsdelivr.net/npm/quill@2.0.0-rc.2/dist/quill.snow.css" rel="stylesheet" />
}

@* LATERAL MENU *@
<div class="row justify-content-around">
    <aside class="col-md-2 h-100 bg-white rounded-3 border-purple">
        <h2 class="p-2 pt-3 text-center">Passos</h2>

        <div id="stepList" class="pb-3">
            @if (Model != null && Model.Any())
            {
                var userId = UserManager.GetUserId(User);
                Guid tutoId = ViewBag.TutorialId;
                var subscription = Context.SubscribeTutorials.Where(s => s.User.Id.ToString() == userId).FirstOrDefault(st => st.User.Id.ToString() == userId && st.TutorialId == tutoId);

                if (subscription != null)
                {
                    <div class="container">
                        <div class="progress">
                            @{
                                var completionPercentage = subscription != null ? subscription.CompletedSteps.CalculateCompletionPercentage(Model.Count(), 0) : 0;
                            }
                            <div class="progress-bar bg-purple" role="progressbar" aria-valuenow="@completionPercentage" aria-valuemin="0" aria-valuemax="100" style="width: @completionPercentage%">
                                @completionPercentage%
                            </div>
                        </div>
                    </div>
                }

                @foreach (var (step, index) in Model.Select((Value, Index) => (Value, Index)))
                {
                    <div class="col justify-content-evenly mt-3 step-div rounded-2 p-2 border-purple" data-step-id="@step.Id">
                        <div class="drag-handle">
                            <div class="text-center">
                                <span class="text-wrap text-break">@Html.DisplayFor(_ => step.Title)</span>
                            </div>

                            <div class="d-flex justify-content-end mt-2">
                                @if (User.Identity.IsAuthenticated && User.Identity.Name == ViewBag.Creator)
                                {
                                    <a href="@Url.Action("Edit", new { id = step.Id })">
                                        <img src="~/img/edit-black.svg" alt="Edit step" class="icon" />
                                    </a>
                                    <a href="@Url.Action("Delete", new { id = step.Id })">
                                        <img src="~/img/delete.svg" alt="Delete step" class="icon" />
                                    </a>
                                }

                                @if (subscription != null && User.Identity.IsAuthenticated && User.Identity.Name != ViewBag.Creator)
                                {
                                    <form method="post" asp-action="CompleteStep" asp-route-tutorialId="@step.TutorialId" asp-route-stepId="@step.Id">
                                        <button class="border-purple bg-purple rounded" type="submit">
                                            <img src="~/img/check.svg" alt="Complete step" />
                                        </button>
                                    </form>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="mt-3">Ainda não foi adicionado conteúdo</p>
            }
        </div>
        @* END OF LATERAL MENU *@

        @if (User.Identity.IsAuthenticated)
        {
            @if (User.Identity.Name == ViewBag.Creator)
            {
                <div class="d-flex justify-content-center my-3">
                    <a asp-action="Create" class="btn bg-purple text-white rounded-circle addStepbutton" asp-route-tutorialId="@ViewBag.TutorialId">+</a>
                </div>
            }
        }
    </aside>

    @* CENTRAL MENU *@
    <div class="col-md-8">
        <div class="row d-flex justify-content-center  text-center ">
            <h1 class="align-self-center">@ViewData["Title"]</h1>
            <h3 class="align-self-center">@ViewBag.Creator</h3>
        </div>
        <div>
            <div class="d-flex justify-content-center"><h4>Descrição</h4></div>
            
            <section id="descriptionDiv" name="descriptionDiv" class="border-purple bg-white rounded-3 py-2 px-1"></section>
        </div>

        <div id="centralMenu">
            @foreach (var step in Model)
            {
                <div class="my-3 step-div" data-step-id="@step.Id">
                    <div class="d-flex justify-content-start drag-handle">
                        <h4>@string.Concat(++step.Order, " - ", step.Title)</h4>
                    </div>

                    <section id="stepDiv" name="stepDiv" class="border-purple bg-white rounded-3 py-2 px-1"></section>
                </div>
            }
        </div>
    </div>
    @* END OF CENTRAL MENU *@

    <input type="hidden" id="editor" name="editor" value="" />
</div>

<div class="text-end">
    <button type="button" class="btn btn-sm bg-darkPurple text-white rounded-circle floating-button-left" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-html="true"
            title="<p>Nesta página pode visualizar todos os passos do tutorial. Caso seja instrutor, poderá adicionar passos, editar ou remover.</p>">
        ?
    </button>

    <a asp-action="Index" asp-controller="Tutorial">Voltar à lista de Tutoriais</a>
</div>