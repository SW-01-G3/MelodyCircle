@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Identity
@using MelodyCircle.Data;
@using System.Globalization;
@using MelodyCircle.ExtensionMethods
@using MelodyCircle.ViewModels;

@inject UserManager<User> UserManager
@inject IAntiforgery Antiforgery

@model ArrangementPanelViewModel

@{
    ViewBag.Title = @Html.Translate("LB_PANNEL");

    var user = await UserManager.GetUserAsync(User);
    var userId = user?.Id;
    var assignedTrack = Model.Tracks.FirstOrDefault(t => t.AssignedUserId.ToString() == userId);
    var assignedTrackNumber = assignedTrack != null ? Model.Tracks.IndexOf(assignedTrack) + 1 : 0;
    var userHasTrack = assignedTrackNumber > 0;
    var antiforgeryTokenSet = Antiforgery.GetAndStoreTokens(Context);
    var hasUploadError = !string.IsNullOrEmpty(TempData["UploadError"] as string);
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/quill@2.0.0-rc.2/dist/quill.js"></script>

    <script>
        let isPlaying = false;
        let currentPlaybackPosition = 0;
        let trackTimers = [];
        let masterTimer;
        let playbackLineInterval;

        let quill = new Quill("#editor");
        let collabDecription = @Html.Raw(Model.Collaboration.Description);
        let descriptionDiv = document.getElementById("description-text");

        let token = document.querySelector('input[name="__RequestVerificationToken"]').value;

        function allowDrop(event) {
            console.log("Drag over the drop area");
            event.preventDefault();
        }

        function drag(event) {
            // console.log("Starting to drag the instrument:", event.target.getAttribute('data-instrument'));
            // event.dataTransfer.setData("text/plain", event.target.getAttribute('data-instrument'));

            const instrumentElement = event.target;
            const isUploaded = instrumentElement.classList.contains('uploaded');
            const instrumentData = {
                name: instrumentElement.getAttribute('data-instrument'),
                isUploaded: isUploaded,
                id: isUploaded ? instrumentElement.getAttribute('data-instrument-id') : null
            };

            console.log('Dragging instrument:', instrumentData); 
            event.dataTransfer.setData("text/plain", JSON.stringify(instrumentData));
        }

        function drop(event) {
            event.preventDefault();

            const data = event.dataTransfer.getData("text/plain");
            console.log('Dropped data:', data); 
            const instrumentData = JSON.parse(data);

            console.log('Parsed instrument data:', instrumentData);

            const trackContainer = event.target.closest('.track');
            const trackId = trackContainer ? trackContainer.getAttribute('data-track-id') : '';
            const mouseX = event.clientX;
            const trackRect = trackContainer.getBoundingClientRect();
            const trackStartX = trackRect.left;
            const trackWidth = trackRect.width;
            const relativePosition = (mouseX - trackStartX) / trackWidth;
            const startTimeSeconds = relativePosition * 4 * 60;

            if (trackId && instrumentData) {
                updateTrack(trackId, instrumentData, startTimeSeconds);
            } else {
                console.error("Drop target is not a track container or instrumentData is missing.");
            }
        }

        function updateTrack(trackId, instrumentData, startTimeSeconds) {
            var url = '@Url.Action("AddInstrumentToTrack", "Collaboration")';

            console.log('Updating track with:', { trackId, instrumentData, startTimeSeconds });

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    TrackId: trackId,
                    InstrumentName: instrumentData.name,
                    StartTime: startTimeSeconds,
                    IsUploaded: instrumentData.isUploaded,
                    InstrumentId: instrumentData.id
                })
            })
            .then(response => {
                if (!response.ok)
                    return response.text().then(text => { throw new Error(text) });

                return response.json();
            })
            .then(data => {
                if (data.success) {
                    console.log('Instrument added successfully:', data.instrumentId);
                    window.location.href = '@Url.Action("ArrangementPanel", "Collaboration", new { id = Model.Collaboration.Id })';
                    addInstrumentToTrackElement(trackId, instrumentName, startTimeSeconds, data.duration, data.instrumentId);
                } else
                    console.error('Error adding instrument:', data.message);
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }

        function addInstrumentToTrackElement(trackId, instrumentName, startTimeSeconds, durationInSeconds, instrumentId) {
            const trackElement = document.querySelector(`[data-track-id="${trackId}"] .drop-area`);
            if (trackElement) {
                const instrumentElement = createInstrumentElement(instrumentName, startTimeSeconds, durationInSeconds, instrumentId, trackElement);
                trackElement.appendChild(instrumentElement);
            }
        }

        function createInstrumentElement(instrumentName, startTimeSeconds, durationInSeconds, instrumentId, trackElement) {
            console.log("Creating instrument element:", instrumentName);

            var element = document.createElement('div');
            element.classList.add('instrument-on-track');
            element.textContent = instrumentName;

            var trackLengthInSeconds = 240;
            var pxPerSecond = trackElement.offsetWidth / trackLengthInSeconds;
            element.style.width = `${pxPerSecond * durationInSeconds}px`;
            element.style.left = `${pxPerSecond * startTimeSeconds}px`;

            var tooltipSpan = document.createElement('span');
            tooltipSpan.textContent = instrumentName;
            tooltipSpan.classList.add('tooltip');
            tooltipSpan.style.display = 'none';

            element.appendChild(tooltipSpan);

            trackElement.appendChild(element);

            var elementRect = element.getBoundingClientRect();
            var elementVisibleWidth = pxPerSecond * durationInSeconds;

            if (elementRect.width < elementVisibleWidth) {
                console.log("Tooltip activated for:", instrumentName);

                element.onmouseenter = function () {
                    console.log("Mouse enter:", instrumentName);
                    tooltipSpan.style.display = 'block';
                };

                element.onmouseleave = function () {
                    console.log("Mouse leave:", instrumentName);
                    tooltipSpan.style.display = 'none';
                };
            }

            return element;
        }

        function removeInstrumentFromTrack(instrumentId, element) {
            var url = '@Url.Action("RemoveInstrumentFromTrack", "Collaboration")';

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({ InstrumentId: instrumentId })
            })
                .then(response => {
                    if (!response.ok)
                        return response.text().then(text => { throw new Error(text) });

                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        console.log('Instrument removed successfully:', instrumentId);
                        element.remove();
                    } else
                        console.error('Error removing instrument:', data.message);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function createTimeline() {
            const tracks = document.querySelectorAll('.track');
            const trackLengthInSeconds = 240;
            const interval = 30;

            tracks.forEach(track => {
                const timeline = document.createElement('div');

                timeline.className = 'timeline';

                for (let time = 0; time <= trackLengthInSeconds; time += interval) {
                    const timeMarker = document.createElement('div');

                    timeMarker.className = 'time-marker';
                    timeMarker.style.width = `${(interval / trackLengthInSeconds) * 100}%`;
                    timeMarker.style.position = 'absolute';
                    timeMarker.style.left = `${(time / trackLengthInSeconds) * 100}%`;

                    const minutes = Math.floor(time / 60);
                    const seconds = time % 60;
                    let label = minutes > 0 ? `${minutes}m` : '';

                    label += seconds > 0 ? `${seconds}s` : '';

                    if (label === '') label = '0min';

                    const markerLabel = document.createElement('span');

                    markerLabel.textContent = label;
                    markerLabel.classList.add("marker-label");

                    timeMarker.appendChild(markerLabel);
                    timeline.appendChild(timeMarker);
                }
                const trackContainer = track.parentNode;
                trackContainer.insertBefore(timeline, track);
            });
        }

        function playTracks() {
            if (!isPlaying) {
                isPlaying = true;
                const tracks = document.querySelectorAll('.track');

                trackTimers.forEach(clearTimeout);
                trackTimers = [];

                tracks.forEach(track => {
                    const audios = track.querySelectorAll('audio');
                    audios.forEach(audio => {
                        let startTime = parseFloat(audio.dataset.startTime);

                        audio.addEventListener('play', () => {
                            currentPlaybackPosition = audio.currentTime;
                        });

                        if (currentPlaybackPosition !== 0)
                            audio.currentTime = currentPlaybackPosition;

                        if (startTime >= currentPlaybackPosition) {
                            let timerId = setTimeout(() => {
                                audio.play();
                            }, (startTime - currentPlaybackPosition) * 1000);
                            trackTimers.push(timerId);
                        }
                    });
                });

                updatePlaybackLine(240 - currentPlaybackPosition, true);

                clearTimeout(masterTimer);
                masterTimer = setTimeout(pauseTracks, (240 - currentPlaybackPosition) * 1000);
            }
        }

        function pauseTracks() {
            if (isPlaying) {
                isPlaying = false;
                const audios = document.querySelectorAll('.track audio');
                audios.forEach(audio => {
                    audio.pause();
                    currentPlaybackPosition = audio.currentTime;
                    audio.addEventListener('pause', () => {
                        currentPlaybackPosition = audio.currentTime;
                    });
                    console.log('Current Playback Position on Pause:', currentPlaybackPosition);
                });

                trackTimers.forEach(clearTimeout);
                trackTimers = [];

                clearTimeout(masterTimer);
                clearInterval(playbackLineInterval);
            }
        }

        function restartTracks() {
            pauseTracks();

            currentPlaybackPosition = 0;
            const audios = document.querySelectorAll('.track audio');
            audios.forEach(audio => {
                audio.currentTime = 0;
            });

            playTracks();

            updatePlaybackLine(240);
        }

        function updatePlaybackLine(duration, startFromCurrentPosition = false) {
            const line = document.getElementById('playback-line');
            const panel = document.getElementById('arrangement-panel');
            const panelWidth = panel.offsetWidth;

            clearInterval(playbackLineInterval);

            let startTime = Date.now();
            let startPosition = 0;

            if (startFromCurrentPosition) {
                startTime -= currentPlaybackPosition * 1000;
                startPosition = (panelWidth * currentPlaybackPosition) / duration;
            }

            startTime = Date.now() - (currentPlaybackPosition * 1000);

            playbackLineInterval = setInterval(() => {
                let currentTime = Date.now();
                let elapsed = currentTime - startTime;
                let percentage = elapsed / (duration * 1000);

                line.style.left = startPosition + (panelWidth * percentage) + 'px';

                if (percentage >= 1) {
                    clearInterval(playbackLineInterval);
                    line.style.display = 'none';
                }
            }, 1000 / 60);

            line.style.display = 'block';
        }

        function attachClickEventToRemoveInstrument() {
            document.querySelectorAll('.removable-instrument').forEach(item => {
                item.addEventListener('click', function (event) {
                    event.stopPropagation();
                    var instrumentId = this.getAttribute('data-instrument-id');
                    removeInstrumentFromTrack(instrumentId, this);
                });
            });
        }

        function adjustPlaybackSpeed(bpm) {
            const defaultBpm = 102;
            const playbackRate = bpm / defaultBpm;

            const audios = document.querySelectorAll('.track audio');

            audios.forEach(audio => {
                audio.playbackRate = playbackRate;
            });
        }

        function playSound(instrumentElement) {
            const instrumentName = instrumentElement.getAttribute('data-instrument').toLowerCase();
            const isUploaded = instrumentElement.classList.contains('uploaded');
            let soundId;

            if (isUploaded) {
                const instrumentId = instrumentElement.getAttribute('data-instrument-id');
                soundId = `sound-uploaded-${instrumentId}`;
            } else
                soundId = `sound-${instrumentName}`;

            const sound = document.getElementById(soundId);

            if (sound) {
                if (isUploaded && !sound.src)
                    sound.src = `/Collaboration/GetInstrumentAudio/${instrumentElement.getAttribute('data-instrument-id')}`;
                
                sound.play();
            } else
                console.error('Sound element not found:', soundId);
        }

        function convertToHtml(editor, contents) {
            editor.setContents(contents);
            return editor.root.innerHTML;
        }

        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.instrument').forEach(item => {
                item.addEventListener('click', event => {
                    playSound(item);
                });
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            createTimeline();
            attachClickEventToRemoveInstrument();
            adjustPlaybackSpeed(document.getElementById('bpm').value);

            document.getElementById('bpm').addEventListener('change', function () {
                let bpmValue = parseFloat(this.value);
                if (!this.disabled && bpmValue >= 60 && bpmValue <= 150) {
                    fetch('@Url.Action("UpdateCollaborationBpm", "Collaboration")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': token
                        },
                        body: JSON.stringify({ collaborationId: '@Model.Collaboration.Id', bpm: bpmValue })
                    })
                        .then(response => {
                            if (response.ok)
                                console.log('BPMs da colaboração atualizados com sucesso.');
                            else
                                response.text().then(text => alert('Erro ao atualizar BPMs da colaboração: ' + text));
                        })
                        .catch(error => {
                            console.error('Falha na requisição: ', error);
                        });
                }
            });
        });

        document.getElementById('play-button').addEventListener('click', playTracks);
        document.getElementById('pause-button').addEventListener('click', pauseTracks);
        document.getElementById('restart-button').addEventListener('click', restartTracks);

        descriptionDiv.innerHTML = convertToHtml(quill, collabDecription);

        $('#chatComponentButton').click(function () {
            $('#chatModal').modal('show');
        });

        $(document).ready(function () {
            var error = "@TempData["UploadError"]";
            if (error.length > 0) {
                $('#uploadModal').modal('show');
            }
        });
    </script>

    <script src="~/js/signalr/dist/browser/signalr.js"></script>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-2">
            <!-- Menu Lateral de Instrumentos -->
            <div id="instrument-menu">
                <h5>@Html.Translate("LB_INSTRUMENTS")</h5>
                @foreach (var instrument in Model.AvailableInstruments)
                {
                    <div id="@instrument.Name" class="instrument" draggable="true" ondragstart="drag(event)" data-instrument="@instrument.Name">
                        @instrument.Name
                        <audio id="@($"sound-{instrument.Name.ToLower()}")" src="@instrument.SoundPath"></audio>

                    </div>
                }
                @foreach (var uploadedInstrument in Model.UploadedInstruments)
                {
                    <div id="uploaded-@uploadedInstrument.Id" class="instrument uploaded" draggable="true" ondragstart="drag(event)" data-instrument="@uploadedInstrument.Name" data-instrument-id="@uploadedInstrument.Id">
                        @uploadedInstrument.Name
                        <audio id="@($"sound-uploaded-{uploadedInstrument.Id}")"></audio>
                    </div>
                }
                <!-- Botão de Upload de Instrumento -->
                <button type="button" id="upload-button" class="upload-button" data-bs-toggle="modal" data-bs-target="#uploadModal">Upload</button>

                <button type="button" class="btn bg-purple text-white mt-4" data-bs-toggle="modal" data-bs-target="#collabDescriptionModal-@Model.Collaboration.Id">
	                @Html.Translate("LB_DESCRIPTION")
                </button>

                <div class="modal fade" id="collabDescriptionModal-@Model.Collaboration.Id" tabindex="-1" aria-labelledby="collabDescriptionLabel-@Model.Collaboration.Id" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header text-center">
                                <h5 class="modal-title" id="collabDescriptionLabel-@Model.Collaboration.Id">@Model.Collaboration.Title</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div id="description-text" class="modal-body text-center">
                                
                            </div>
                            <input type="hidden" id="editor" name="editor" value="" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-10">
            <!-- Painel de Arranjo -->
            <div id="arrangement-panel">
                <div class="header">
                    <button id="play-button" class="control-button">
                        <img src="@Url.Content("~/img/painel-play.svg")" alt="Play" />
                    </button>
                    <button id="pause-button" class="control-button">
                        <img src="@Url.Content("~/img/painel-pause.svg")" alt="Pause" />
                    </button>
                    <button id="restart-button" class="control-button">
                        <img src="@Url.Content("~/img/painel-restart.svg")" alt="Restart" />
                    </button>

                    @if (user.Id == Model.Collaboration.CreatorId)
                    {
                        <span class="bpm-style-text">
                            BPM:
                            <input type="number" id="bpm" value="@(Model.UserTrack?.BPM ?? 102)" min="60" max="150" onchange="adjustPlaybackSpeed(this.value)" />
                        </span>
                    }
                    else
                    {
                        <span class="bpm-style-text">BPM:</span>
                        <span>@(Model.UserTrack?.BPM ?? 102)</span>
                    }

                    @if (userHasTrack)
                    {
                        <span class="assignedTrackNumber">@Html.Translate("LB_YOURTRACK"): @assignedTrackNumber</span>
                    }
                    else
                    {
                        <span class="assignedTrackNumber">@Html.Translate("LB_NOTRACK")</span>
                    }
                </div>

                <div id="arrangement-container" style="position: relative; width: 100%;">
                    <div id="playback-line" style="position: absolute; margin-top: 27px; margin-left: 50px; height: 100%; width: 2px; background-color: red; display: none; z-index: 1;"></div> <!-- ajuste o left para alinhar com o início das faixas -->
                    <!-- Faixas -->
                    @foreach (var track in Model.Tracks)
                    {
                        <div class="track-container">
                            <div class="timeline">
                                <!-- Régua Temporal inserida aqui -->
                            </div>

                            <div class="track-number">@Html.Translate("LB_TRACK") @(Model.Tracks.IndexOf(track) + 1)</div>

                            <div class="track" data-track-id="@track.Id" style="height: 100px; margin-bottom: 5px;">

                                <!-- Área droppable -->
                                <div class="drop-area"
                                    @if (track.AssignedUserId.ToString() == userId)
                                    {
                                        @:ondragover="allowDrop(event)"
                                        @:ondrop="drop(event)"
                                    }>

                                    @foreach (var instrument in track.InstrumentsOnTrack)
                                    {
                                        <div class="instrument-on-track removable-instrument" data-instrument-id="@instrument.Id"
                                             style="left: @CalculateLeftPosition(instrument.StartTime, track.Duration); width: @CalculateWidth(instrument.Duration, track.Duration);">
                                            <span>@instrument.InstrumentType</span>

                                            @if (instrument.InstrumentId != null)
                                            {
                                                <audio preload="auto" id="audio-@instrument.Id"
                                                       data-start-time="@instrument.StartTime.TotalSeconds"
                                                       src="@Url.Action("GetInstrumentAudio", "Collaboration", new { id = instrument.InstrumentId })">
                                                </audio>
                                            }
                                            else
                                            {
                                                <audio preload="auto" id="audio-@instrument.Id"
                                                       data-start-time="@instrument.StartTime.TotalSeconds"
                                                       src="@Url.Content("~/sounds/" + instrument.InstrumentType.ToLower() + ".mp3")">
                                                </audio>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Upload Modal -->
<div class="modal fade" id="uploadModal" tabindex="-1" role="dialog" aria-labelledby="uploadModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadModalLabel">Upload</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" />
            </div>
            <div class="modal-body">
                <form id="upload-instrument-form" asp-action="UploadInstrument" asp-route-collaborationId="@Model.Collaboration.Id" method="post" enctype="multipart/form-data">
                    <div class="form-group mb-3">
                        <label for="instrumentName">@Html.Translate("LB_INSTRUMENTNAME")</label>
                        <input type="text" class="form-control" id="instrumentName" name="instrumentName" placeholder="Enter instrument name" required>
                    </div>
                    <div class="form-group mb-3">
                        <label for="soundFile">@Html.Translate("LB_INSTRUMENTFILE")</label>
                        <input type="file" class="form-control-file" id="soundFile" name="soundFile" accept=".mp3" required>
                        @if (hasUploadError)
                        {
                            <div class="text-danger">
                                @TempData["UploadError"]
                            </div>
                        }
                    </div>
                    <button type="submit" class="btn bg-darkPurple text-white" id="upload-instrument-btn">Upload</button>
                </form>
            </div>
        </div>
    </div>
</div>

<div id="chatModal" class="modal fade" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-bottom-right" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Html.Translate("LB_COLLABCHAT")</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @await Html.PartialAsync("_ChatPartial", Model.Collaboration)
            </div>
        </div>
    </div>
</div>

<button id="chatComponentButton" class="btn bg-purple text-white rounded floating-button-center">Chat</button>

<form id="antiforgery-form" method="post" style="display:none;">
    <input type="hidden" name="__RequestVerificationToken" value="@antiforgeryTokenSet.RequestToken" />
</form>

@functions {
    public string CalculateLeftPosition(TimeSpan startTime, TimeSpan totalDuration)
    {
        double positionPercentage = (startTime.TotalSeconds / totalDuration.TotalSeconds) * 100;
        return positionPercentage.ToString("0.######", CultureInfo.InvariantCulture) + "%";
    }

    public string CalculateWidth(TimeSpan duration, TimeSpan totalDuration)
    {
        double widthPercentage = (duration.TotalSeconds / totalDuration.TotalSeconds) * 100;
        return widthPercentage.ToString("0.######", CultureInfo.InvariantCulture) + "%";
    }
}