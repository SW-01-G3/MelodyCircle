@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager
@inject IAntiforgery Antiforgery

@model ArrangementPanelViewModel

@{
    ViewBag.Title = "Painel de Arranjo";

    var user = await UserManager.GetUserAsync(User);
    var userId = user?.Id;
    var assignedTrack = Model.Tracks.FirstOrDefault(t => t.AssignedUserId.ToString() == userId);
    var assignedTrackNumber = assignedTrack != null ? Model.Tracks.IndexOf(assignedTrack) + 1 : 0;
    var userHasTrack = assignedTrackNumber > 0;
    var antiforgeryTokenSet = Antiforgery.GetAndStoreTokens(Context);
}

@section Scripts {
    <script>
        document.querySelectorAll('.instrument').forEach(item => {
            item.addEventListener('click', event => {
                let soundId = `sound-${item.getAttribute('data-instrument')}`;
                let sound = document.getElementById(soundId);

                sound.play();
            });
        });

        function allowDrop(event) {
            event.preventDefault();
        }

        function drag(event) {
            event.dataTransfer.setData("text/plain", event.target.getAttribute('data-instrument'));
        }

        function drop(event) {
            event.preventDefault();

            var instrumentName = event.dataTransfer.getData("text/plain");
            var trackContainer = event.target.closest('.track');
            var trackId = trackContainer ? trackContainer.getAttribute('data-track-id') : '';
            var mouseX = event.clientX;
            var trackRect = trackContainer.getBoundingClientRect();
            var trackStartX = trackRect.left;
            var trackWidth = trackRect.width;
            var relativePosition = (mouseX - trackStartX) / trackWidth;

            var startTimeSeconds = relativePosition * 4 * 60;

            if (trackId && instrumentName)
                updateTrack(trackId, instrumentName, startTimeSeconds);
            else
                console.error("Drop target is not a track container or trackId/instrumentName is missing.");
        }

        function updateTrack(trackId, instrumentName, startTimeSeconds) {
            var token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            var url = '@Url.Action("AddInstrumentToTrack", "Collaboration")';

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify({
                    TrackId: trackId,
                    InstrumentName: instrumentName,
                    StartTime: startTimeSeconds
                })
            })
                .then(response => {
                    if (!response.ok)
                        return response.text().then(text => { throw new Error(text) });

                    return response.json();
                })
                .then(data => {
                    if (data.success)
                        console.log('Instrument added successfully:', data.instrumentId);
                    
                    console.error('Error adding instrument:', data.message);
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function createInstrumentElement(instrumentName, instrumentId) {
            var element = document.createElement('div');
            element.classList.add('instrument-track');
            element.textContent = instrumentName;
            element.setAttribute('data-instrument-id', instrumentId);

            element.style.border = '1px solid #000';
            element.style.marginTop = '5px';
            element.style.padding = '5px';

            return element;
        }

        function createTimeline() {
            const tracks = document.querySelectorAll('.track-container'); // Note que estamos selecionando o container da track agora
            const trackLength = 240; // Duração total em segundos (4 minutos)
            const interval = 30; // Intervalo em segundos para as marcações

            // Criar a régua para cada faixa
            tracks.forEach((trackContainer, index) => {
                const timeline = document.createElement('div');
                timeline.className = 'timeline';
                timeline.style.display = 'flex';
                timeline.style.width = '100%'; // A régua deve ocupar toda a largura do container da track
                timeline.style.marginBottom = '10px'; // Espaço abaixo da régua

                // Criar as marcações de tempo
                for (let time = 0; time <= trackLength; time += interval) {
                    const timeMarker = document.createElement('div');
                    timeMarker.className = 'time-marker';
                    timeMarker.style.flexGrow = '1'; // Distribui uniformemente o espaço
                    timeMarker.style.textAlign = 'center';
                    timeMarker.style.position = 'relative';

                    const markerLabel = document.createElement('span');
                    markerLabel.textContent = `${time / 60}min`;
                    markerLabel.style.position = 'absolute';
                    markerLabel.style.width = '100%';
                    markerLabel.style.left = '0';
                    markerLabel.style.bottom = '-20px'; // Posição abaixo da régua

                    timeMarker.appendChild(markerLabel);
                    timeline.appendChild(timeMarker);
                }

                // Adiciona a régua ao container da track
                trackContainer.prepend(timeline); // Adiciona a régua no topo do container da track

                // Adiciona a numeração da track
                const trackNumber = document.createElement('div');
                trackNumber.className = 'track-number';
                trackNumber.textContent = `Track ${index + 1}`; // Numeração começa em 1
                trackNumber.style.position = 'absolute';
                trackNumber.style.right = '10px'; // Posição à direita
                trackNumber.style.top = '5px'; // Posição acima da régua

                trackContainer.prepend(trackNumber); // Adiciona a numeração no topo do container da track
            });
        }

        function addInstrumentToTrackElement(trackId, instrumentName) {
            const trackElement = document.querySelector(`[data-track-id="${trackId}"] .drop-area`);
            if (trackElement) {
                const instrumentElement = createInstrumentElement(instrumentName);
                trackElement.appendChild(instrumentElement);
            }
        }

        document.addEventListener('DOMContentLoaded', createTimeline);
    </script>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-2">
            <!-- Menu Lateral de Instrumentos -->
            <div id="instrument-menu">
                <h5>INSTRUMENTOS</h5>
                @foreach (var instrument in Model.AvailableInstruments)
                {
                    <div id="@instrument.Name" class="instrument" draggable="true" ondragstart="drag(event)" data-instrument="@instrument.Name">
                        @instrument.Name
                    </div>
                }
                <!-- Botão de Upload de Instrumento -->
                <button id="upload-button">UPLOAD</button>
            </div>
        </div>
        <div class="col-md-10">
            <!-- Painel de Arranjo -->
            <div id="arrangement-panel">
                <div class="header">
                    <span>BPM: <input type="number" id="bpm" value="102" min="60" max="150" /></span>
                    @if (userHasTrack)
                    {
                        <span>A tua faixa: @assignedTrackNumber</span>
                    }
                    else
                    {
                        <span>Você não tem faixa atribuída</span>
                    }
                </div>
                <!-- As faixas serão carregadas aqui -->
                @foreach (var track in Model.Tracks)
                {
                    <div class="track-container">
                        <div class="timeline">
                            <!-- Marcadores de tempo serão inseridos aqui -->
                        </div>
                        <div class="track" data-track-id="@track.Id">
                            <!-- Área droppable -->
                            @if (track.AssignedUserId.ToString() == userId)
                            {
                                <div class="drop-area" ondragover="allowDrop(event)" ondrop="drop(event)"></div>
                            }
                        </div>
                        @* <div class="track-number">Track @Model.Tracks.IndexOf(track) + 1</div> *@
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<form id="antiforgery-form" method="post" style="display:none;">
    <input type="hidden" name="__RequestVerificationToken" value="@antiforgeryTokenSet.RequestToken" />
</form>