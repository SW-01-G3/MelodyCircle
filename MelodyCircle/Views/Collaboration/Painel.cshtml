@using Microsoft.AspNetCore.Antiforgery
@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager
@inject IAntiforgery Antiforgery

@model ArrangementPanelViewModel

@{
    ViewBag.Title = "Painel de Arranjo";

    var user = await UserManager.GetUserAsync(User);
    var userId = user?.Id;
    var assignedTrack = Model.Tracks.FirstOrDefault(t => t.AssignedUserId.ToString() == userId);
    var assignedTrackNumber = assignedTrack != null ? Model.Tracks.IndexOf(assignedTrack) + 1 : 0;
    var userHasTrack = assignedTrackNumber > 0;
    var antiforgeryTokenSet = Antiforgery.GetAndStoreTokens(Context);
}

@section Scripts {
    <script>
        // document.querySelectorAll('.instrument').forEach(item => {
        //     item.addEventListener('click', event => {
        //         let instrumentName = item.getAttribute('data-instrument').toLowerCase();
        //         let soundId = `sound-${instrumentName}`;
        //         let sound = document.getElementById(soundId);
        //         if (sound) sound.play();
        //         else console.error('Sound element not found:', soundId);
        //     });
        // });

        function playSound(instrumentElement) {
            const instrumentName = instrumentElement.getAttribute('data-instrument').toLowerCase();
            const isUploaded = instrumentElement.classList.contains('uploaded');
            let soundId;

            if (isUploaded) {
                // If it's an uploaded instrument, use a different ID pattern
                const instrumentId = instrumentElement.getAttribute('data-instrument-id');
                soundId = `sound-uploaded-${instrumentId}`;
            } else {
                soundId = `sound-${instrumentName}`;
            }

            const sound = document.getElementById(soundId);
            if (sound) {
                if (isUploaded && !sound.src) {
                    // For uploaded instruments, set the src dynamically if it's not already set
                    sound.src = `/Collaboration/GetInstrumentAudio/${instrumentElement.getAttribute('data-instrument-id')}`;
                }
                sound.play();
            } else {
                console.error('Sound element not found:', soundId);
            }
        }
        document.addEventListener('DOMContentLoaded', () => {
            document.querySelectorAll('.instrument').forEach(item => {
                item.addEventListener('click', event => {
                    playSound(item);
                });
            });
        });



        function allowDrop(event) {
            console.log("Drag over the drop area");
            event.preventDefault();
        }

        function drag(event) {
            const instrumentElement = event.target;
            const isUploaded = instrumentElement.classList.contains('uploaded');
            const instrumentData = {
                name: instrumentElement.getAttribute('data-instrument'),
                isUploaded: isUploaded,
                id: isUploaded ? instrumentElement.getAttribute('data-instrument-id') : null
            };

            event.dataTransfer.setData("text", JSON.stringify(instrumentData));
        }

        function drop(event) {
            event.preventDefault();
            const data = event.dataTransfer.getData("text");
            const instrumentData = JSON.parse(data);

            const trackContainer = event.target.closest('.track');
            const trackId = trackContainer.getAttribute('data-track-id');

            const mouseX = event.clientX;
            const trackRect = trackContainer.getBoundingClientRect();
            const trackStartX = trackRect.left;
            const trackWidth = trackRect.width;
            const relativePosition = (mouseX - trackStartX) / trackWidth;

            const startTimeSeconds = relativePosition * 4 * 60;
            console.log("StartTime Seconds:", startTimeSeconds);
                
            if (trackId) {
                updateTrack(trackId, instrumentData, startTimeSeconds); // Pass instrumentData object
            } else {
                console.error("Drop target is not a track container or trackId/instrument information is missing.");
            }
        }

        function updateTrack(trackId, instrumentData, startTimeSeconds) {
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const payload = {
                TrackId: trackId,
                InstrumentName: instrumentData.name,
                StartTime: startTimeSeconds,
                IsUploaded: instrumentData.isUploaded,
                InstrumentId: instrumentData.id // This could be null for default instruments
            };

            fetch('@Url.Action("AddInstrumentToTrack", "Collaboration")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify(payload)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log('Instrument added successfully:', data.instrumentId);
                        addInstrumentToTrackElement(trackId, instrumentData.name, startTimeSeconds, data.duration);
                        // Additional logic to visually represent the instrument on the track
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                });
        }

        function createInstrumentElement(instrumentName, startTimeSeconds, durationInSeconds, trackElement) {
            console.log("Creating instrument element:", instrumentName);

            var element = document.createElement('div');
            element.classList.add('instrument-track');
            element.textContent = instrumentName;
            element.style.position = 'absolute';
            element.style.whiteSpace = 'nowrap';
            element.style.overflow = 'hidden';
            element.style.textOverflow = 'ellipsis';

            // Define as dimensões e a posição do elemento do instrumento
            var trackLengthInSeconds = 240;
            var pxPerSecond = trackElement.offsetWidth / trackLengthInSeconds;
            element.style.width = `${pxPerSecond * durationInSeconds}px`;
            element.style.left = `${pxPerSecond * startTimeSeconds}px`;

            // Adicione o elemento <span> para exibir o nome completo do instrumento
            var tooltipSpan = document.createElement('span');
            tooltipSpan.textContent = instrumentName;
            tooltipSpan.classList.add('tooltip');
            tooltipSpan.style.display = 'none'; // Inicialmente escondido
            element.appendChild(tooltipSpan);

            // Anexar o elemento ao documento antes de calcular a largura real
            trackElement.appendChild(element);

            var elementRect = element.getBoundingClientRect();
            var elementVisibleWidth = pxPerSecond * durationInSeconds;

            // Verifique se o texto do instrumento está cortado e só então ative a tooltip
            if (elementRect.width < elementVisibleWidth) {
                console.log("Tooltip activated for:", instrumentName);

                element.onmouseenter = function () {
                    console.log("Mouse enter:", instrumentName);
                    tooltipSpan.style.display = 'block'; // Mostra a tooltip quando o mouse está sobre o elemento
                };
                element.onmouseleave = function () {
                    console.log("Mouse leave:", instrumentName);
                    tooltipSpan.style.display = 'none'; // Esconde a tooltip quando o mouse sai do elemento
                };
            } else console.log("erro")

            // Estilização adicional
            element.style.border = '2px solid #000';
            element.style.backgroundColor = '#FFF';
            element.style.color = '#000';
            element.style.textAlign = 'center';
            element.style.lineHeight = '50px';
            element.style.marginTop = '5px';
            element.style.padding = '5px';
            element.style.fontSize = '1rem';
            element.style.fontWeight = 'bold';

            return element;
        }

        function createTimeline() {
            const tracks = document.querySelectorAll('.track');
            const trackLength = 240; // Duração total em segundos (4 minutos)
            const interval = 30; // Intervalo em segundos para as marcações

            // Criar a régua para cada faixa
            tracks.forEach(track => {
                const timeline = document.createElement('div');
                timeline.className = 'timeline';
                timeline.style.display = 'flex';
                timeline.style.position = 'absolute';
                timeline.style.width = '100%'; // Isso fará com que a timeline e a track tenham o mesmo tamanho
                timeline.style.height = '20px';

                // Criar as marcações de tempo
                for (let time = 0; time <= trackLength; time += interval) {
                    const timeMarker = document.createElement('div');
                    timeMarker.className = 'time-marker';
                    timeMarker.style.width = `${(interval / trackLength) * 100}%`;
                    timeMarker.style.position = 'absolute';
                    timeMarker.style.left = `${(time / trackLength) * 100}%`;

                    const markerLabel = document.createElement('span');
                    markerLabel.textContent = `${time / 60}min`;
                    markerLabel.style.position = 'absolute';
                    markerLabel.style.left = '50%';
                    markerLabel.style.transform = 'translateX(-50%)';
                    markerLabel.style.bottom = '20px'; // Posicionando os números acima da régua

                    timeMarker.appendChild(markerLabel);
                    timeline.appendChild(timeMarker);
                }

                const trackContainer = track.parentNode;
                trackContainer.insertBefore(timeline, track); // Insere a timeline acima da track
            });
        }

        function addInstrumentToTrackElement(trackId, instrumentName, startTimeSeconds, durationInSeconds) {
            const trackElement = document.querySelector(`[data-track-id="${trackId}"] .drop-area`);
            if (trackElement) {
                const instrumentElement = createInstrumentElement(instrumentName, startTimeSeconds, durationInSeconds, trackElement);
                trackElement.appendChild(instrumentElement);
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            createTimeline();
        });
    </script>
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-2">
            <!-- Menu Lateral de Instrumentos -->
            <div id="instrument-menu">
                <h5>INSTRUMENTOS</h5>
                @foreach (var instrument in Model.AvailableInstruments)
                {
                    <div id="@instrument.Name" class="instrument" draggable="true" ondragstart="drag(event)" data-instrument="@instrument.Name">
                        @instrument.Name
                        <audio id="@($"sound-{instrument.Name.ToLower()}")" src="@instrument.SoundPath"></audio>

                    </div>
                }

                @foreach (var uploadedInstrument in Model.UploadedInstruments)
                {
                    <div id="uploaded-@uploadedInstrument.Id" class="instrument uploaded" draggable="true" ondragstart="drag(event)" data-instrument="@uploadedInstrument.Name" data-instrument-id="@uploadedInstrument.Id">
                        @uploadedInstrument.Name
                        <audio id="@($"sound-uploaded-{uploadedInstrument.Id}")"></audio>
                    </div>
                }
                <!-- Botão de Upload de Instrumento -->
                <button type="button" id="upload-button" data-bs-toggle="modal" data-bs-target="#uploadModal">UPLOAD</button>
            </div>
        </div>
        <div class="col-md-10">
            <!-- Painel de Arranjo -->
            <div id="arrangement-panel">
                <div class="header">
                    <span>BPM: <input type="number" id="bpm" value="102" min="60" max="150" /></span>
                    @if (userHasTrack)
                    {
                        <span>A tua faixa: @assignedTrackNumber</span>
                    }
                    else
                    {
                        <span>Você não tem faixa atribuída</span>
                    }
                </div>
                <!-- As faixas serão carregadas aqui -->
                @foreach (var track in Model.Tracks)
                {
                    <div class="track-container">
                        <div class="timeline">
                            <!-- Marcadores de tempo serão inseridos aqui -->
                        </div>

                        <div class="track-number">Track @Model.Tracks.IndexOf(track)</div>

                        <div class="track" data-track-id="@track.Id" style="height: 100px; margin-bottom: 5px;">
                            <!-- Área droppable -->
                            @if (track.AssignedUserId.ToString() == userId)
                            {
                                <div class="drop-area" ondragover="allowDrop(event)" ondrop="drop(event)">
                                    <span class="instrument-tooltip"></span>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Upload Modal -->
<div class="modal fade" id="uploadModal" tabindex="-1" role="dialog" aria-labelledby="uploadModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="uploadModalLabel">Upload Instrument</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="upload-instrument-form" asp-action="UploadInstrument" asp-route-collaborationId="@Model.Collaboration.Id" method="post" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="instrumentName">Instrument Name</label>
                        <input type="text" class="form-control" id="instrumentName" name="instrumentName" placeholder="Enter instrument name" required>
                    </div>
                    <div class="form-group">
                        <label for="soundFile">Instrument File (.mp3)</label>
                        <input type="file" class="form-control-file" id="soundFile" name="soundFile" accept=".mp3" required>
                    </div>
                    <button type="submit" class="btn btn-primary" id="upload-instrument-btn">Upload</button>
                </form>
            </div>
        </div>
    </div>
</div>

<form id="antiforgery-form" method="post" style="display:none;">
    <input type="hidden" name="__RequestVerificationToken" value="@antiforgeryTokenSet.RequestToken" />
</form>