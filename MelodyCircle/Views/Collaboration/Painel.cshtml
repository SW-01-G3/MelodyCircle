@using Microsoft.AspNetCore.Identity
@inject UserManager<User> UserManager

@model ArrangementPanelViewModel

@{
    ViewBag.Title = "Painel de Arranjo";
    var user = await UserManager.GetUserAsync(User);
    var userId = user?.Id;
    var assignedTrack = Model.Tracks.FirstOrDefault(t => t.AssignedUserId.ToString() == userId);
    var assignedTrackNumber = assignedTrack != null ? Model.Tracks.IndexOf(assignedTrack) + 1 : 0;
    var userHasTrack = assignedTrackNumber > 0;
}

<div class="container-fluid">
    <div class="row">
        <div class="col-md-2">
            <!-- Menu Lateral de Instrumentos -->
            <div id="instrument-menu">
                <h3>INSTRUMENTOS</h3>
                @foreach (var instrument in Model.AvailableInstruments)
                {
                    <div class="instrument" draggable="true" ondragstart="drag(event)" data-instrument="@instrument.Name" id="@instrument.Name">
                        @instrument.Name
                    </div>
                    <audio id="@($"sound-{instrument.Name}")" src="@instrument.SoundPath"></audio>
                }
            </div>
        </div>
        <div class="col-md-10">
            <!-- Painel de Arranjo -->
            <div id="arrangement-panel">
                <div class="header">
                    <span>BPM: <input type="number" id="bpm" value="102" min="60" max="150" /></span>
                    <span class="time-limit">4:00</span>
                    @if (userHasTrack)
                    {
                        <span>A tua faixa: @assignedTrackNumber</span>
                    }
                    else
                    {
                        <span>Não tens faixa atribuída</span>
                    }
                </div>
                <!-- As faixas serão carregadas aqui -->
               @foreach (var track in Model.Tracks)
                {
                    <div class="track" data-track-id="@track.Id">
                        <!-- Apenas faixas designadas para o usuário são droppables -->
                        @if (track.AssignedUserId.ToString() == UserManager.GetUserId(User))
                        {
                            <div class="drop-area" ondrop="drop(event)" ondragover="allowDrop(event)"></div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
// Permitir o arrasto sobre o alvo
function allowDrop(ev) {
    ev.preventDefault();
}

// Manipular o evento drop
function drop(ev) {
    ev.preventDefault();
    var data = ev.dataTransfer.getData("text");
    var instrument = document.getElementById(data);
    
    // Adicionar o instrumento à faixa se droppable
    if (ev.target.classList.contains('drop-area')) {
        ev.target.appendChild(instrument.cloneNode(true));
        
        // Chame uma função para atualizar o back-end aqui
        // updateTrack(ev.target.parentNode.dataset.trackId, data);
    }
}

// Manipular o evento drag
function drag(ev) {
    ev.dataTransfer.setData("text/plain", ev.target.id);
}

// Atualiza a faixa no back-end (a implementar)
function updateTrack(trackId, instrumentName) {
    // Fazer uma requisição AJAX para atualizar a faixa no servidor
}

document.querySelectorAll('.instrument').forEach(item => {
    item.addEventListener('click', event => {
        let soundId = `sound-${item.getAttribute('data-instrument')}`;
        let sound = document.getElementById(soundId);
        sound.play();
    });
});
</script>
}

<style>
   @* Adicione estilos conforme necessário aqui *@
</style>