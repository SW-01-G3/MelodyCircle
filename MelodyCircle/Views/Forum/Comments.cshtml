@using MelodyCircle.ExtensionMethods
@using System.Text.Json
@using Newtonsoft.Json
@model MelodyCircle.Models.ForumPost

@section head {
    <link href="https://cdn.jsdelivr.net/npm/quill@2.0.0-rc.2/dist/quill.snow.css" rel="stylesheet" />
}

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/quill@2.0.0-rc.2/dist/quill.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            let contentDiv = document.getElementById("contentDiv");
            if (contentDiv) {
                let quillView = new Quill(contentDiv, {
                    theme: 'bubble',
                    readOnly: true
                });

                let content = @Html.Raw(Json.Serialize(Model.Content));
                quillView.setContents(JSON.parse(content));
            }

            let quillComment = new Quill('#editor-comment', {
                placeholder: 'Write a comment...',
                theme: 'snow'
            });

            document.querySelector('#comment-form').addEventListener('submit', function (event) {
                let content = quillComment.root.innerHTML;
                let isEmpty = content.trim() === '<p><br></p>';
                if (isEmpty) {
                    event.preventDefault();
                    document.getElementById('comment-error').textContent = "Comment cannot be empty";
                } else {
                    document.getElementById('hiddenContent').value = content;
                }
            });

            let comments = @Html.Raw(JsonConvert.SerializeObject(Model.Comments.Select(c => c.Content)));
            comments.forEach((comment, index) => {
                let commentDiv = document.createElement('div');
                commentDiv.classList.add('comment-content-view');
                document.body.appendChild(commentDiv);
                let quillCommentView = new Quill(commentDiv, {
                    theme: 'bubble',
                    readOnly: true
                });
                quillCommentView.setContents(JSON.parse(comment));
            });
        });
    </script>
}

<div class="border border-purple bg-white text-dark p-3 rounded-3 text-center mx-auto" style="width: 50%;">
    <h1>@Model.Title</h1>
    <div id="contentDiv"></div>
</div>

<div class="border border-purple bg-white text-dark p-3 rounded-3 text-center mx-auto my-4 w-50">
    @if (!Model.IsClosed)
    {
        @if (User.Identity.IsAuthenticated)
        {
            <h3>@Html.Translate("LB_ADDCOMMENTS")</h3>
            <form asp-action="Comment" asp-route-id="@Model.Id" method="post" id="comment-form">
                @Html.AntiForgeryToken()
                <div class="form-group">
                    <div id="editor-comment" style="height: 150px;"></div>
                    <input type="hidden" name="Content" id="hiddenContent" />
                </div>
                <div id="comment-error" class="text-danger"></div>
                <button type="submit" class="btn bg-purple text-white mt-3">@Html.Translate("LB_ADDCOMMENTS")</button>
            </form>
        }
        else
        {
            <p>Please log in to comment</p>
        }
    }
    else
    {
        <div class="text-center my-4"><p>@Html.Translate("LB_COMMENTINFO")</p></div>
    }

    <hr>

    @if (Model.Comments.Any())
    {
        <h2>@Html.Translate("LB_COMMENTS")</h2>
        foreach (var comment in Model.Comments)
        {
            <div class="bg-light p-3 mb-3 rounded">
                <div class="d-flex justify-content-between mb-2">
                    <div><a asp-action="Profile" asp-controller="User" asp-route-id="@comment.User.UserName" class="text-decoration-none text-primary">@comment.User.UserName</a></div>
                    <div class="text-muted">@comment.CreatedAt.ToString("dd-MM-yyyy HH:mm")</div>
                </div>
                <div name="commentContent" class="text-start">@Html.Raw(comment.Content)</div>
            </div>
        }
    }
    else
    {
        <div class="text-center my-4"><p>@Html.Translate("LB_NOCOMMENTS")</p></div>
    }
</div>