@model MelodyCircle.ViewModels.ProfileViewModel
@using MelodyCircle.ExtensionMethods
@using Microsoft.AspNetCore.Identity
@using MelodyCircle.Data
@using MelodyCircle.ViewModels
@using System.Security.Claims
@inject UserManager<User> UserManager
@inject ApplicationDbContext Context

@{
    ViewData["Title"] = Html.Translate("LB_PROFILE");

    var hasUriError = !string.IsNullOrEmpty(TempData["UriError"] as string);
}

<div class=" text-center border-purple bg-white p-5 mx-auto w-50  row d-flex justify-content-center align-items-center">

    <div class="col-sm-3 justify-content-center align-items-center ">

        <!-- Foto de Perfil -->
        @*@Html.DisplayFor(model => model.User.ProfilePicture)*@

        @if (Model.User.ProfilePicture != null && Model.User.ProfilePicture.Length > 0)
        {
            <img src="data:image/jpeg;base64,@(Convert.ToBase64String(Model.User.ProfilePicture))"
                 alt="Profile Picture" class="profile-picture foto rounded " />
            
        }

        @if (User.Identity.IsAuthenticated && Model.User.UserName == User.Identity.Name)
        {


            <button type="button" class="btn" data-bs-toggle="modal" data-bs-target="#exampleModal">
                <img src="~/img/mudar_foto.svg" />
            </button>

            <!-- Modal -->
            <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exampleModalLabel">@Html.Translate("LB_PICTURECHANGE")</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">

                            <img id="previewImage" src="#" alt="Preview" style="max-width: 100%; max-height: 300px;">
                            
                            

                        </div>
                        <div class="modal-footer">
                            <form asp-action="PutProfilePicture" asp-route-id="@Model.User.UserName" method="post" enctype="multipart/form-data">

                                <input type="file" class="form-control-file" id="profilePicture" name="profilePicture" accept="image/jpeg" onchange="previewImage() ">
                                <button type="submit" class="btn bg-purple text-white border-darkPurple">Upload</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>


            
        }
        @{
	        double averageRating = Context.UserRating
		        .Where(u => u.RatedUserName.Equals(Model.User.UserName))
		        .ToList()
		        .CalculateAverageRating();
    
	        int roundedRating = (int)Math.Round(averageRating, MidpointRounding.AwayFromZero);
	        int fullStars = roundedRating / 2;
	        int halfStar = roundedRating % 2;
	        int emptyStars = 5 - fullStars - halfStar;
        }
        
        <div class="star-rating ">
	        @for (int i = 0; i < fullStars; i++)
	        {
		        <img src="~/img/star-filled-svgrepo-com.svg" />
	        }
	        @if (halfStar > 0)
	        {
		        <img src="~/img/star-half-svgrepo-com.svg" />
		        fullStars++;
	        }
	        @for (int i = fullStars; i < 5; i++)
	        {
		        <img src="~/img/estrelaEmpty.svg" />
	        }
            <br/>
        </div>
    </div>

    <div class="col-sm-4 ">
                <!-- Nome de Utilizador e Nome -->
                <h1>@Html.DisplayFor(model => model.User.UserName)</h1>
                <h5>@Html.DisplayFor(model => model.User.Name)</h5>
    </div>

    <div class="col-sm-4 ">
                <!-- Data de Nascimento, género e cargos -->
                <h6>@Html.DisplayFor(model => model.User.BirthDate)</h6>
                <h6>@Html.DisplayFor(model => model.User.Gender)</h6>
                <h6>@Html.DisplayFor(model => model.Roles)</h6>
    </div>

    @if (User.Identity.IsAuthenticated && Model.User.UserName != User.Identity.Name)
    {
	    <div class="col-sm-1">
		    @{
			    var currentUser = await UserManager.GetUserAsync(User);
			    await Context.Entry(currentUser).Collection(u => u.Connections).LoadAsync();
			    var isConnected = currentUser.Connections.Find(u => u.UserName == Model.User.UserName);

			    if (isConnected == null)
			    {
				    <form asp-action="AddConnection" asp-route-id="@Model.User.UserName">
                        <button class="border-purple bg-purple rounded" type="submit"> <img src="~/img/add_connect.svg"/> </button>
				    </form>
			    }
			    else
			    {
				    <button type="button" class="border-purple bg-white " data-bs-toggle="modal" data-bs-target="#removeConnectionModal">
					    <img src="~/img/remove_conexao.svg" />
				    </button>
				    <!-- Modal para remover música -->
				    <div class="modal fade" id="removeConnectionModal" tabindex="-1" aria-labelledby="removeConnectionModalLabel" aria-hidden="true">
					    <div class="modal-dialog">
						    <div class="modal-content">
							    <div class="modal-header">
                                    <h5 class="modal-title" id="removeConnectionModalLabel">@Html.Translate("LB_REMOVECONNECTION")</h5>
								    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
							    </div>
							    <div class="modal-body">
								    <!-- Formulário para remover música -->
								    <form id="removeConnectionForm" asp-action="RemoveConnection" asp-route-id="@Model.User.UserName">
									    <div class="mb-3">
                                            <button type="submit" class="btn bg-purple text-white border-darkPurple rounded">@Html.Translate("LB_REMOVE")</button>
									    </div>
								    </form>
							    </div>
						    </div>
					    </div>
				    </div>
			    }

                <button type="button" class="border-purple bg-purple rounded " data-bs-toggle="modal" data-bs-target="#addToCollabModal">
                    <img src="~/img/statistic.svg" />
                </button>

                <div class="modal fade" id="addToCollabModal" tabindex="-1" aria-labelledby="addToCollabModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="addToCollabModalLabel">Colaborações Privadas</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body" id="privateCollaborationsContainer">
                                @{
                                    var userId = User.FindFirstValue(ClaimTypes.NameIdentifier);

                                    var collaborations = Context.Collaborations
                                    .Where(c => c.CreatorId == userId && c.AccessMode == AccessMode.Private)
                                    .Where(c => !c.WaitingUsers.Contains(Model.User))
                                    .Where(c => !c.ContributingUsers.Contains(Model.User)).ToList();
                                }

                                @foreach (var collaboration in collaborations)
                                {
                                    <div>
                                        <h3>@collaboration.Title</h3>
                                        <form asp-action="InviteToCollab" asp-controller="Collaboration" asp-route-collaborationId="@collaboration.Id"  asp-route-userId="@Model.User.UserName" >
                                            <button class="btn bg-purple text-white" type="submit">Convidar</button>
                                        </form>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>

		    }
		    
            <button type="button" class="border-purple bg-purple rounded mt-1   " data-bs-toggle="modal" data-bs-target="#addStarRatingModal">
			    <img src="~/img/star-add-filled-svgrepo-com.svg" />
		    </button>
            <div class="modal fade" id="addStarRatingModal" tabindex="-1" aria-labelledby="addStarRatingModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addStarRatingModalLabel">@Html.Translate("LB_010")</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="starRatingForm" asp-action="RateUser" asp-route-id="@Model.User.UserName" method="post">
                                <div class="star-rating">
                                    @for (int i = 1; i <= 10; i++)
                                    {
                                        <img class="star" src="~/img/estrelaEmpty.svg" data-value="@i" />
                                    }
                                </div>
                                <input type="hidden" name="rating" id="starRating" value="0" />
                                <button type="submit" class="btn bg-purple text-white border-darkPurple rounded mt-3">@Html.Translate("LB_GIVESTARS")</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>

            <script>
                document.addEventListener("DOMContentLoaded", function () {
                    const stars = document.querySelectorAll(".star");
                    //const baseUrl = '@Url.Content("~/img/")';

                    stars.forEach(star => {
                        star.addEventListener("mouseover", function () {
                            const value = parseInt(this.getAttribute("data-value"));
                            fillStars(value, "/img/star-filled-svgrepo-com.svg", "/img/estrelaEmpty.svg");
                        });

                        star.addEventListener("mouseleave", function () {
                            const rating = parseInt(document.getElementById("starRating").value);
                            fillStars(rating, "/img/star-filled-svgrepo-com.svg", "/img/estrelaEmpty.svg");
                        });

                        star.addEventListener("click", function () {
                            const value = parseInt(this.getAttribute("data-value"));
                            document.getElementById("starRating").value = value;
                            fillStars(value, "/img/star-filled-svgrepo-com.svg", "/img/estrelaEmpty.svg");
                        });
                    });

                    function fillStars(value, filledSrc, emptySrc) {
                        stars.forEach(star => {
                            const starValue = parseInt(star.getAttribute("data-value"));
                            if (starValue <= value) {
                                star.src = filledSrc;
                            } else {
                                star.src = emptySrc;
                            }
                        });
                    }
                });
            </script>

	    </div>
    }
</div>




@*ADICIONAR MUSICA*@
@if (User.Identity.IsAuthenticated && Model.User.UserName == User.Identity.Name)
{
    <!-- Modal para adicionar música -->
    <div class="modal fade" id="addMusicModal" tabindex="-1" aria-labelledby="addMusicModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addMusicModalLabel">@Html.Translate("LB_ADD_MUSIC")</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-center bg-white justify-content-center align-items-center">

                    <!-- Formulário para adicionar música -->
                    <form id="addMusicForm" asp-action="AddMusicCard" asp-route-id="@Model.User.UserName" method="post" enctype="multipart/form-data">
                        <div class="mb-3">
                            <label for="musicUri" class="form-label">@Html.Translate("LB_INSERT_URI")</label>
                            <input type="text" class="form-control" id="musicUri" name="musicUri" placeholder="https://open.spotify.com/track/">
                            @if (hasUriError)
                            {
	                            <div class="text-danger">
                                    @TempData["UriError"]
	                            </div>
                            }
                            <button type="submit" class=" mt-3 btn bg-purple text-white border-darkPurple p-auto" onclick="addMusic()">@Html.Translate("LB_ADD")</button>
                            <!--<span asp-validation-for="musicUri" class="text-danger"></span>-->
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
}



        @if (User.Identity.IsAuthenticated && Model.User.UserName == User.Identity.Name)
        {
	        <div class="text-end">
		        <button type="button" class="btn btn-sm bg-darkPurple text-white rounded-circle floating-button-left" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-html="true"
                title="@Html.Translate("TT_PROFILE")">
			        ?
		        </button>
	        </div>
	        <a class="btn bg-purple text-white rounded-circle floating-button" href="/Tutorial/Create" data-bs-toggle="modal" data-bs-target="#addMusicModal">+</a>
        }
        
        
        

        @await Component.InvokeAsync("MusicList", new UserMusicsViewModel()
        {
	        User = Model.User, 
	        MusicUri = Model.User.MusicURI.ToList()
        })