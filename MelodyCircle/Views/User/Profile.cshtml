@model MelodyCircle.ViewModels.ProfileViewModel
@using MelodyCircle.ExtensionMethods
@using Microsoft.AspNetCore.Identity
@using MelodyCircle.Data
@inject UserManager<User> UserManager
@inject ApplicationDbContext Context



@{
    ViewData["Title"] = "Profile";
}

<div class=" text-center border-purple bg-white p-5 mx-auto w-50  row d-flex justify-content-center align-items-center">

    <div class="col-sm-4  ">
        
            <!-- Foto de Perfil -->
            @*@Html.DisplayFor(model => model.User.ProfilePicture)*@

            @if (Model.User.ProfilePicture != null && Model.User.ProfilePicture.Length > 0)
            {
                <img src="data:image/jpeg;base64,@(Convert.ToBase64String(Model.User.ProfilePicture))"
                     alt="Profile Picture" class="profile-picture foto rounded " />
            }

            @if (User.Identity.IsAuthenticated && Model.User.UserName == User.Identity.Name)
            {
                <form asp-action="PutProfilePicture" asp-route-id="@Model.User.UserName" method="post" enctype="multipart/form-data">

                    <input type="file" class="form-control-file" id="profilePicture" name="profilePicture" accept="image/jpeg">
                    <button type="submit" class="btn btn-primary">Upload</button>
                </form>
            }

        <h6>Rating:@Model.User.Ratings.CalculateAverageRating()</h6>

    </div>

    <div class="col-sm-4 ">
                <!-- Nome de Utilizador e Nome -->
                <h1>@Html.DisplayFor(model => model.User.UserName)</h1>
                <h5>@Html.DisplayFor(model => model.User.Name)</h5>
    </div>

    <div class="col-sm-4 ">
                <!-- Data de Nascimento, género e cargos -->
                <h6>@Html.DisplayFor(model => model.User.BirthDate)</h6>
                <h6>@Html.DisplayFor(model => model.User.Gender)</h6>
                <h6>@Html.DisplayFor(model => model.Roles)</h6>
    </div>
    <div class="col-sm-4 ">
        @if (User.Identity.IsAuthenticated && Model.User.UserName != User.Identity.Name)
        {
            //Model.Context.Entry(Model.User).Collection(u => u.Connections).Load();
            var currentUser = await UserManager.GetUserAsync(User);
            await Context.Entry(currentUser).Collection(u => u.Connections).LoadAsync();
            var isConnected = currentUser.Connections.Find(u => u.UserName == Model.User.UserName);

            if (isConnected == null)
            {
                <form asp-action="AddConnection" asp-route-id="@Model.User.UserName">
                    <button type="submit"><img src=" ~ /img/add_conexao.svg" /></button>
                </form>
            }
            else
            {
                <form asp-action="RemoveConnection" asp-route-id="@Model.User.UserName">
                    <button type="submit"><img src=" ~ /img/remove_conexao.svg"/></button>
                </form>
            }
        }
    </div>

</div>


<div>
    <h4>Rate this user:</h4>
    <form asp-action="RateUser" asp-route-id="@Model.User.UserName" method="post">
        <input type="number" name="rating" min="0" max="10" step="1" />
        <button type="submit">Rate</button>
    </form>
</div>

@*<div>
    <a asp-action="Index">Back to List</a>
</div>*@


